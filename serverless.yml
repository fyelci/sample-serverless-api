service: questions-api

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-resource-tagging


provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-2
  timeout: 30
  memorySize: 256
  logRetentionInDays: 90
  environment:
    DYNAMODB_QUESTIONS_TABLE:  ${sls:stage}-${self:service}-${env:QUESTIONS_TABLE}
    S3_FILES_BUCKET: ${sls:stage}-${self:service}-files
  apiGateway:
    shouldStartNameWithService: true
  stackTags:
    ENVIRONMENT: "${sls:stage}"
    PROJECT: "${self:service}"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [ QuestionsDynamoDbTable, Arn ]
            - "Fn::Join": ['/', ["Fn::GetAtt": [ QuestionsDynamoDbTable, Arn ], 'index', 'CategoryIdIndex']]
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3FilesBucket
                - '/*'


functions:
  create:
    handler: src/handlers/create.create
    events:
      - http:
          path: questions
          method: post
          cors: true

  list:
    handler: src/handlers/list.list
    events:
      - http:
          path: questions
          method: get
          cors: true

  get:
    handler: src/handlers/get.get
    events:
      - http:
          path: questions/{id}
          method: get
          cors: true

  update:
    handler: src/handlers/update.update
    events:
      - http:
          path: questions/{id}
          method: put
          cors: true
  upload:
    handler: src/handlers/upload.getSignedUrl
    events:
      - http:
          path: questions/{id}/start-upload
          method: put
          cors: true
  download:
    handler: src/handlers/download.getSignedUrl
    events:
      - http:
          path: questions/{id}/download
          method: get
          cors: true


resources:
  Resources:
    QuestionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: N
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: CategoryIdIndex
            KeySchema:
              - AttributeName: categoryId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        TableName: ${self:provider.environment.DYNAMODB_QUESTIONS_TABLE}
    S3FilesBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.S3_FILES_BUCKET}

custom:
  logLevelMap:
    prod: info
    staging: info
  logLevel: ${self:custom.logLevelMap.${sls:stage}, 'debug'}
